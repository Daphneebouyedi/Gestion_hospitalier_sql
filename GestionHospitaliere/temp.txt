Voici ReceptionnisteWidow.py :

# ReceptionWindow.py

from PySide6.QtWidgets import (
    QApplication, QMainWindow, QWidget, QPushButton, QLabel, QVBoxLayout,
    QHBoxLayout, QTableWidget, QTableWidgetItem, QHeaderView, QLineEdit,
    QListWidget, QMenuBar, QScrollArea, QStackedWidget, QFormLayout, QMessageBox,
    QComboBox  # Import QComboBox pour le champ Genre
)
from PySide6.QtCore import Qt, QTimer
from PySide6.QtGui import QAction
import sys
from viewmodel.ReceptionViewModel import ReceptionViewModel


class ReceptionWindow(QMainWindow):
    def __init__(self, receptionist_id):
        super().__init__()
        self.receptionist_id = receptionist_id
        self.view_model = ReceptionViewModel(self.receptionist_id)
        self.setWindowTitle("Patient Management Interface")
        self.setGeometry(100, 100, 1200, 800)

        # Set minimum width to 80% of the screen width
        screen_geometry = self.screen().availableGeometry()
        min_width = int(screen_geometry.width() * 0.9)
        min_height = int(screen_geometry.height() * 0.2)
        self.setMinimumWidth(min_width)
        self.setMinimumHeight(min_height)

        # Center the window
        QTimer.singleShot(0, self.center_window)

        # Menu Bar
        menu_bar = QMenuBar(self)
        self.setMenuBar(menu_bar)

        # File Menu
        file_menu = menu_bar.addMenu("File")
        exit_action = QAction("Exit", self)
        file_menu.addAction(exit_action)
        exit_action.triggered.connect(self.close)

        # Edit Menu
        edit_menu = menu_bar.addMenu("Edit")
        settings_action = QAction("Settings", self)
        edit_menu.addAction(settings_action)

        # Help Menu
        help_menu = menu_bar.addMenu("Help")
        about_action = QAction("About", self)
        help_menu.addAction(about_action)

        # Main Container Widget
        main_widget = QWidget()
        self.setCentralWidget(main_widget)

        # Main Layout
        main_layout = QHBoxLayout()
        main_widget.setLayout(main_layout)

        # Sidebar Options
        self.sidebar_options = ["Patients", "Dashboard", "Appointments", "Settings"]

        # Sidebar Widget with Toggle Button
        self.sidebar_widget = QWidget()
        self.sidebar_layout = QVBoxLayout()
        self.sidebar_widget.setLayout(self.sidebar_layout)
        self.sidebar_widget.setFixedWidth(200)
        main_layout.addWidget(self.sidebar_widget)

        self.toggle_button = QPushButton("<")
        self.toggle_button.setFixedWidth(30)
        self.toggle_button.clicked.connect(self.toggle_sidebar)
        self.sidebar_layout.addWidget(self.toggle_button, alignment=Qt.AlignLeft)

        # Stacked Widget for Sidebar Options
        self.sidebar_options_stack = QStackedWidget()
        self.sidebar_layout.addWidget(self.sidebar_options_stack)

        # Full Sidebar Options (Expanded View)
        self.full_sidebar_widget = QListWidget()
        self.full_sidebar_widget.addItems(self.get_sidebar_options())
        self.full_sidebar_widget.currentRowChanged.connect(self.switch_content_area)
        self.sidebar_options_stack.addWidget(self.full_sidebar_widget)

        # Collapsed Sidebar Options (Reduced View)
        collapsed_sidebar_widget = QListWidget()
        collapsed_options = [option[0] for option in self.get_sidebar_options()]
        collapsed_sidebar_widget.addItems(collapsed_options)
        self.sidebar_options_stack.addWidget(collapsed_sidebar_widget)

        # Parent Area Layout
        parent_area = QVBoxLayout()
        parent_area.setObjectName("parentArea")
        parent_widget = QWidget()
        parent_widget.setLayout(parent_area)
        parent_widget.setObjectName("parentWidget")
        main_layout.addWidget(parent_widget)

        # Status Area Layout
        status_area = QHBoxLayout()
        parent_area.addLayout(status_area)

        # Back Button
        back_button = QPushButton("< Back")
        back_button.setObjectName("backButton")
        back_button.clicked.connect(self.go_back)
        status_area.addWidget(back_button, alignment=Qt.AlignLeft)

        # Search Bar and User Info
        search_user_layout = QHBoxLayout()
        search_user_layout.addStretch()
        self.search_bar = QLineEdit()
        self.search_bar.setPlaceholderText("Search patients...")
        self.search_bar.setObjectName("searchBar")
        self.search_bar.setFixedWidth(350)
        self.search_bar.textChanged.connect(self.filter_table)  # Connecter le champ de recherche à la méthode de filtrage
        search_user_layout.addWidget(self.search_bar, alignment=Qt.AlignRight)

        # Récupérer le nom du réceptionniste
        user_name = self.view_model.get_receptionist_name()
        user_label = QLabel(user_name)
        user_label.setObjectName("userLabel")
        search_user_layout.addWidget(user_label, alignment=Qt.AlignRight)
        status_area.addLayout(search_user_layout)

        # Content Area Layout (Stacked Widget for different content views)
        self.content_area_stack = QStackedWidget()
        parent_area.addWidget(self.content_area_stack)

        # Patients Widget
        self.patient_widget = self.create_patient_widget()
        self.content_area_stack.addWidget(self.patient_widget)

        # Dashboard Widget
        dashboard_widget = QLabel("Dashboard Content")
        self.content_area_stack.addWidget(dashboard_widget)

        # Appointments Widget
        appointments_widget = QLabel("Appointments Content")
        self.content_area_stack.addWidget(appointments_widget)

        # Settings Widget
        settings_widget = QLabel("Settings Content")
        self.content_area_stack.addWidget(settings_widget)

        # Add Patient Form Widget
        self.add_patient_widget = self.create_add_patient_widget()
        self.content_area_stack.addWidget(self.add_patient_widget)

        # Set default view to Patients
        self.full_sidebar_widget.setCurrentRow(0)
        self.content_area_stack.setCurrentIndex(0)

    def get_sidebar_options(self):
        return self.sidebar_options

    def toggle_sidebar(self):
        current_index = self.sidebar_options_stack.currentIndex()
        new_index, new_width, button_text = self.toggle_sidebar_logic(current_index)
        self.sidebar_options_stack.setCurrentIndex(new_index)
        self.sidebar_widget.setFixedWidth(new_width)
        self.toggle_button.setText(button_text)

    def toggle_sidebar_logic(self, current_index):
        if current_index == 0:
            return 1, 60, ">"
        else:
            return 0, 200, "<"

    def center_window(self):
        qr = self.frameGeometry()
        cp = self.screen().availableGeometry().center()
        qr.moveCenter(cp)
        self.move(qr.topLeft())

    def switch_content_area(self, index):
        self.content_area_stack.setCurrentIndex(index)

    def create_patient_widget(self):
        patient_widget = QWidget()
        patient_layout = QHBoxLayout(patient_widget)  # HBox pour inclure le tableau et la barre latérale

        # Scroll Area for Patient Table
        patient_scroll_area = QScrollArea()
        patient_scroll_area.setWidgetResizable(True)
        patient_scroll_widget = QWidget()
        patient_table_layout = QVBoxLayout(patient_scroll_widget)
        patient_scroll_area.setWidget(patient_scroll_widget)

        # Table to Display Patients
        self.patient_table = QTableWidget(0, 5)  # Initialiser avec 0 lignes et 5 colonnes
        self.patient_table.setSelectionBehavior(QTableWidget.SelectRows)
        self.patient_table.setHorizontalHeaderLabels(["Nom", "Prénom", "Âge", "Téléphone", "Genre"])
        self.patient_table.setObjectName("patientTable")

        # Désactiver l'affichage de la grille et définir les couleurs alternées
        self.patient_table.setShowGrid(False)
        self.patient_table.setAlternatingRowColors(True)

        # Remplir la table avec des données réelles
        self.load_patient_data()

        # Ajuster la taille des colonnes pour qu'elles prennent toute la largeur disponible
        self.patient_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)

        # Aligner les en-têtes horizontaux à gauche comme les données
        self.patient_table.horizontalHeader().setDefaultAlignment(Qt.AlignLeft | Qt.AlignVCenter)

        patient_table_layout.addWidget(self.patient_table)

        # Label "Aucun résultat correspondant"
        self.no_result_label = QLabel("Aucun résultat correspondant")
        self.no_result_label.setAlignment(Qt.AlignCenter)
        self.no_result_label.setObjectName("noResultLabel")
        self.no_result_label.setVisible(False)
        patient_table_layout.addWidget(self.no_result_label)

        # Ajouter le patient_scroll_area au layout principal des patients
        patient_layout.addWidget(patient_scroll_area)

        # Right Sidebar for Functionality
        right_sidebar_layout = QVBoxLayout()
        right_sidebar_layout.setAlignment(Qt.AlignTop)
        functionality_label = QLabel("""FUNCTIONALITY:

* RECEPTIONIST
  - RECORDS
    - Create patient record

* DOCTOR
  - EXAMINATION
    - Create examination

* CASHIER
  - BILLING

INTERFACES
- Add""")
        functionality_label.setObjectName("functionalityLabel")
        right_sidebar_layout.addWidget(functionality_label)

        right_sidebar_widget = QWidget()
        right_sidebar_widget.setLayout(right_sidebar_layout)
        right_sidebar_widget.setObjectName("rightSidebarWidget")
        right_sidebar_widget.setFixedWidth(200)  # Définir une largeur fixe pour la barre latérale droite

        # Ajouter la barre latérale droite au layout principal de la page des patients
        patient_layout.addWidget(right_sidebar_widget)

        # Add Patient Button
        add_patient_button = QPushButton("Add Patient")
        add_patient_button.setObjectName("addPatientButton")
        add_patient_button.setFixedWidth(150)
        add_patient_button.clicked.connect(self.show_add_patient_form)
        patient_table_layout.addWidget(add_patient_button, alignment=Qt.AlignRight)

        return patient_widget

    def create_add_patient_widget(self):
        add_patient_widget = QWidget()
        layout = QFormLayout()

        # Ajouter des champs de formulaire pour ajouter un patient
        self.add_patient_nom = QLineEdit()
        self.add_patient_prenom = QLineEdit()
        self.add_patient_age = QLineEdit()
        self.add_patient_telephone = QLineEdit()
        self.add_patient_telephone2 = QLineEdit()
        self.add_patient_email = QLineEdit()
        self.add_patient_address = QLineEdit()
        self.add_patient_genre = QComboBox()
        self.add_patient_genre.addItems(["Masculin", "Féminin"])

        layout.addRow("Nom:", self.add_patient_nom)
        layout.addRow("Prénom:", self.add_patient_prenom)
        layout.addRow("Âge:", self.add_patient_age)
        layout.addRow("Téléphone:", self.add_patient_telephone)
        layout.addRow("Téléphone 2:", self.add_patient_telephone2)
        layout.addRow("Email:", self.add_patient_email)
        layout.addRow("Adresse:", self.add_patient_address)
        layout.addRow("Genre:", self.add_patient_genre)

        # Ajouter un bouton pour enregistrer les informations du patient
        save_button = QPushButton("Save")
        save_button.clicked.connect(self.save_new_patient)
        layout.addWidget(save_button)

        add_patient_widget.setLayout(layout)
        return add_patient_widget

    def show_add_patient_form(self):
        # Naviguer vers le formulaire d'ajout de patient
        self.content_area_stack.setCurrentWidget(self.add_patient_widget)

    def go_back(self):
        # Revenir à la vue précédente (Patients)
        self.content_area_stack.setCurrentIndex(0)  # L'index du widget patient

    def filter_table(self):
        filter_text = self.search_bar.text().lower()
        found = False
        for row in range(self.patient_table.rowCount()):
            match = False
            for column in range(self.patient_table.columnCount()):
                item = self.patient_table.item(row, column)
                if filter_text in item.text().lower():
                    match = True
                    break
            self.patient_table.setRowHidden(row, not match)
            if match:
                found = True

        # Afficher ou cacher la table et le label "Aucun résultat correspondant"
        self.patient_table.setVisible(found)
        self.no_result_label.setVisible(not found)

    def save_new_patient(self):
        # Récupérer les données du formulaire
        nom = self.add_patient_nom.text().strip()
        prenom = self.add_patient_prenom.text().strip()
        age_text = self.add_patient_age.text().strip()
        telephone = self.add_patient_telephone.text().strip()
        telephone2 = self.add_patient_telephone2.text().strip()
        email = self.add_patient_email.text().strip()
        address = self.add_patient_address.text().strip()
        genre = self.add_patient_genre.currentText().strip()

        # Validation des champs
        if not nom or not prenom or not age_text or not telephone or not genre:
            QMessageBox.warning(self, "Validation", "Veuillez remplir tous les champs obligatoires.")
            return

        try:
            age = int(age_text)
            if age < 0 or age > 120:
                raise ValueError
        except ValueError:
            QMessageBox.warning(self, "Validation", "Veuillez entrer un âge valide.")
            return

        if genre not in ['Masculin', 'Féminin']:
            QMessageBox.warning(self, "Validation", "Le genre doit être 'Masculin' ou 'Féminin'.")
            return

        # Ajouter le patient à la base de données via le ViewModel
        success = self.view_model.add_patient(nom, prenom, age, telephone, telephone2, email, address, genre)
        if success:
            QMessageBox.information(self, "Succès", "Patient ajouté avec succès.")
            # Recharger les données dans la table
            self.load_patient_data()
            # Revenir à la vue principale des patients
            self.content_area_stack.setCurrentIndex(0)
            # Réinitialiser le formulaire
            self.add_patient_nom.clear()
            self.add_patient_prenom.clear()
            self.add_patient_age.clear()
            self.add_patient_telephone.clear()
            self.add_patient_telephone2.clear()
            self.add_patient_email.clear()
            self.add_patient_address.clear()
            self.add_patient_genre.setCurrentIndex(0)  # Réinitialiser le champ Genre
        else:
            QMessageBox.critical(self, "Erreur", "Échec de l'ajout du patient. Veuillez réessayer.")

    def load_patient_data(self):
        # Récupérer les données des patients depuis la base de données
        self.patient_data = self.view_model.prepare_patient_data()  # Appel sans argument
        self.patient_table.setRowCount(0)  # Réinitialiser la table

        for row_idx, row_data in enumerate(self.patient_data):
            self.patient_table.insertRow(row_idx)
            for col_idx, data in enumerate(row_data):
                item = QTableWidgetItem(str(data))
                item.setFlags(item.flags() & ~Qt.ItemIsEditable)  # Rendre non éditable (facultatif)
                # Appliquer la couleur de fond alternée
                background = self.view_model.get_patient_table_background(row_idx)
                if background:
                    item.setBackground(background)
                self.patient_table.setItem(row_idx, col_idx, item)

    def closeEvent(self, event):
        # Déconnecter la base de données lors de la fermeture de la fenêtre
        self.view_model.disconnect_database()
        event.accept()


if __name__ == "__main__":
    app = QApplication(sys.argv)
    receptionist_id = 419  # ID du réceptionniste connecté (à obtenir lors de la connexion)
    window = ReceptionWindow(receptionist_id)
    window.setObjectName("mainWindow")
    window.show()
    try:
        with open("../styles/style.qss", "r") as style_file:
            app.setStyleSheet(style_file.read())
    except FileNotFoundError:
        pass
    sys.exit(app.exec())

Et voici son viewmodel ReceptionisteViewModel.py :

# viewmodel/ReceptionViewModel.py

import mysql.connector
from mysql.connector import Error
from PySide6.QtGui import QColor
from datetime import datetime, date

class ReceptionViewModel:
    def __init__(self, receptionist_id):
        self.receptionist_id = receptionist_id
        # Configuration de la connexion à la base de données
        self.db_config = {
            'host': 'localhost',          # Remplacez par votre hôte MySQL si différent
            'user': 'root',               # Remplacez par votre nom d'utilisateur MySQL
            'password': 'RYK_mysql-24', # Remplacez par votre mot de passe MySQL
            'database': 'gestion_Hopital_db'
        }
        self.connection = None
        self.connect_to_database()

    def connect_to_database(self):
        """Etablit la connexion à la base de données."""
        try:
            self.connection = mysql.connector.connect(**self.db_config)
            if self.connection.is_connected():
                print("Connexion à la base de données réussie.")
        except Error as e:
            print(f"Erreur de connexion à la base de données : {e}")
            self.connection = None

    def disconnect_database(self):
        """Ferme la connexion à la base de données."""
        if self.connection is not None and self.connection.is_connected():
            self.connection.close()
            print("Connexion à la base de données fermée.")

    def prepare_patient_data(self):
        """
        Récupère tous les patients depuis la base de données.

        Returns:
            list: Liste de listes contenant les données des patients.
        """
        if self.connection is None:
            print("Aucune connexion à la base de données.")
            return []

        data = []
        try:
            cursor = self.connection.cursor(dictionary=True)
            query = """
                SELECT nom_Patient, prenom_Patient, date_naissance, telephone_Patient_1, genre_Patient
                FROM Patient
            """
            cursor.execute(query)
            results = cursor.fetchall()

            for row in results:
                nom = row['nom_Patient']
                prenom = row['prenom_Patient']
                date_naissance = row['date_naissance']
                age = self.calculate_age(date_naissance)
                telephone = row['telephone_Patient_1']
                genre = row['genre_Patient']
                row_data = [nom, prenom, age, telephone, genre]
                data.append(row_data)

            cursor.close()
        except Error as e:
            print(f"Erreur lors de la récupération des données des patients : {e}")

        return data

    def calculate_age(self, birth_date):
        """
        Calcule l'âge basé sur la date de naissance.

        Args:
            birth_date (date): Date de naissance du patient.

        Returns:
            int: Âge du patient.
        """
        today = date.today()
        try:
            birthday = birth_date.replace(year=today.year)
        except ValueError:
            # 29 février le cas échéant
            birthday = birth_date.replace(year=today.year, month=birth_date.month + 1, day=1)
        if birthday > today:
            return today.year - birth_date.year - 1
        else:
            return today.year - birth_date.year

    def get_patient_table_background(self, row):
        """Retourne la couleur de fond pour une ligne donnée."""
        return QColor(240, 240, 240) if row % 2 == 0 else None

    def add_patient(self, nom, prenom, age, telephone1, telephone2, email, address, genre):
        """
        Ajoute un nouveau patient dans la base de données.

        Args:
            nom (str): Nom du patient.
            prenom (str): Prénom du patient.
            age (int): Âge du patient.
            telephone1 (str): Téléphone principal du patient.
            telephone2 (str): Téléphone secondaire.
            email (str): Email du patient.
            address (str): Adresse du patient.
            genre (str): Genre du patient.

        Returns:
            bool: True si l'ajout est réussi, sinon False.
        """
        if self.connection is None:
            print("Aucune connexion à la base de données.")
            return False

        try:
            cursor = self.connection.cursor()

            # Calculer date_naissance à partir de l'âge
            today = date.today()
            birth_year = today.year - age
            date_naissance = today.replace(year=birth_year)

            query = """
                INSERT INTO Patient (nom_Patient, prenom_Patient, genre_Patient, telephone_Patient_1, telephone_Patient_2, email_Patient, adresse_Patient, date_naissance)
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
            """
            cursor.execute(query, (nom, prenom, genre, telephone1, telephone2, email, address, date_naissance))
            patient_id = cursor.lastrowid  # Récupérer l'ID du patient inséré

            # Créer le dossier médical pour le patient
            dossier_query = """
                INSERT INTO Dossier_Medical (groupe_Sanguin, statut_Rhesus, observation, date_Ouverture, id_Receptionniste, id_Patient)
                VALUES (%s, %s, %s, %s, %s, %s)
            """
            # Valeurs par défaut pour le dossier médical (à personnaliser si nécessaire)
            groupe_Sanguin = 'O'
            statut_Rhesus = 'Positif'
            observation = ''
            date_Ouverture = datetime.now()
            id_Receptionniste = self.receptionist_id
            cursor.execute(dossier_query, (groupe_Sanguin, statut_Rhesus, observation, date_Ouverture, id_Receptionniste, patient_id))

            self.connection.commit()
            cursor.close()
            return True
        except Error as e:
            print(f"Erreur lors de l'ajout du patient : {e}")
            return False

    def get_receptionist_name(self):
        """Récupère le nom complet du réceptionniste connecté."""
        if self.connection is None:
            print("Aucune connexion à la base de données.")
            return "Utilisateur Inconnu"

        try:
            cursor = self.connection.cursor()
            query = "SELECT nom_Receptionniste, prenom_Receptionniste FROM Receptionniste WHERE id_Receptionniste = %s"
            cursor.execute(query, (self.receptionist_id,))
            result = cursor.fetchone()
            cursor.close()
            if result:
                nom = result[0]
                prenom = result[1]
                return f"{prenom} {nom}"
            else:
                return "Utilisateur Inconnu"
        except Error as e:
            print(f"Erreur lors de la récupération du nom du réceptionniste : {e}")
            return "Utilisateur Inconnu"

En te basant sur les mêmes architectures et logiques, fourni moi ComptableWindow.py et sa logique ComptableViewModel.py

Sauf que dans ComptableViewModel, on va manipuler les facturations. Donc au lieu d'afficher des des patiens dans la table, on affiche la liste des facturation(Nom, prenom) mais cette fois on affiche les factures non payée dans la première option du SideBar, et dans la deuxième on affiche celles payées. Ensuite un clique simple sur la liste des facturation nous affiches dans la barre latérale droite les informations de la facture comme ceci :
Nom 
Date

Et un double clique affiche la facture, il faut ensuite un check box qui permet de dire si oui ou non la facture a été payée.